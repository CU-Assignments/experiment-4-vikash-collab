import java.util.Scanner;

class TicketBookingSystem {
    private boolean[] seats;
    private final Object lock = new Object(); // For synchronization

    public TicketBookingSystem(int totalSeats) {
        seats = new boolean[totalSeats]; // false means available, true means booked
    }

    // Method to book a seat
    public void bookSeat(int seatNumber, String customerType) {
        synchronized (lock) {
            if (seatNumber < 1 || seatNumber > seats.length) {
                System.out.println("Invalid seat number: " + seatNumber);
                return;
            }
            if (!seats[seatNumber - 1]) {
                seats[seatNumber - 1] = true; // Book the seat
                System.out.println(customerType + " booking: Seat " + seatNumber + " booked successfully.");
            } else {
                System.out.println(customerType + " booking: Seat " + seatNumber + " is already booked.");
            }
        }
    }

    // Method to display available seats
    public void displayAvailableSeats() {
        System.out.println("\nAvailable Seats:");
        for (int i = 0; i < seats.length; i++) {
            if (!seats[i]) {
                System.out.print((i + 1) + " ");
            }
        }
        System.out.println();
    }
}

class BookingThread extends Thread {
    private TicketBookingSystem bookingSystem;
    private int seatNumber;
    private String customerType;

    public BookingThread(TicketBookingSystem bookingSystem, int seatNumber, String customerType) {
        this.bookingSystem = bookingSystem;
        this.seatNumber = seatNumber;
        this.customerType = customerType;
        if (customerType.equals("VIP")) {
            this.setPriority(Thread.MAX_PRIORITY); // VIP threads have higher priority
        } else {
            this.setPriority(Thread.MIN_PRIORITY); // Regular threads have lower priority
        }
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(seatNumber, customerType);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter total number of seats: ");
        int totalSeats = scanner.nextInt();
        TicketBookingSystem bookingSystem = new TicketBookingSystem(totalSeats);

        while (true) {
            System.out.println("\n1. Book a Seat");
            System.out.println("2. Display Available Seats");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter seat number to book: ");
                    int seatNumber = scanner.nextInt();
                    System.out.print("Enter customer type (VIP/Regular): ");
                    String customerType = scanner.next();
                    BookingThread bookingThread = new BookingThread(bookingSystem, seatNumber, customerType);
                    bookingThread.start();
                    try {
                        bookingThread.join(); // Wait for the thread to finish
                    } catch (InterruptedException e) {
                        System.out.println("Thread interrupted: " + e.getMessage());
                    }
                    break;
                case 2:
                    bookingSystem.displayAvailableSeats();
                    break;
                case 3:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
